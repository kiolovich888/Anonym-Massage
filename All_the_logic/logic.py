import os
import random
import sqlite3
import time

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.utils.exceptions import MessageNotModified

from different_function.generate_for_data import generate_random_string, update_interest
from different_function.game import get_user_currency, update_currency, chest_game, add_points
from different_function.search_and_dialog import find_partner, delete_chat_room, find_premium_partner
from user_keyboard.keyboard import user_menu, premium_user_menu, admin_menu, game_menu, back_menu, cancel_markup, \
    subs_buy, chest_menu, greater_or_lower_menu, get_cancel_button, rules_menu_key, start_prem_search, gender_keyboard, \
    get_interests_keyboard
from config.config import bot, dp, REGISTER_DB
from different_function.admin import get_recipient_id, save_message, update_user_status, \
 \
    get_chat_room, get_all_users, get_all_messages, get_active_tables, get_user_rights, \
    get_menu_markup, find_user_by_username, update_subscription, find_messages_by_user_id, get_all_admin_ids, \
    find_user_by_user_id, get_users_with_notification_enabled, find_table_info_by_user_id, \
    find_user_by_username_2
from config.config import DATABASE, QUEUE_DATA, CURRENCY_DATABASE
from all_state.finite_state_ma import SomeState, SpamState, TableState, AnonSMS, Registration, Form


@dp.message_handler(commands=['start'])
async def start(message: types.Message, state: FSMContext):
    conn_users = sqlite3.connect(DATABASE)
    conn_queue = sqlite3.connect(QUEUE_DATA)
    cursor_users = conn_users.cursor()
    cursor_queue = conn_queue.cursor()
    conn_balance = sqlite3.connect(CURRENCY_DATABASE)
    cursor_balance = conn_balance.cursor()

    cursor_users.execute("SELECT * FROM users WHERE user_id = ?", (message.from_user.id,))
    user_data = cursor_users.fetchone()
    if user_data:
        user_rights = user_data[3]
        if user_rights == 'admin':
            with open('image/KINETIC_WITH_LOVE.jpg', 'rb') as photo:
                await message.reply_photo(photo)
            await message.reply(f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å, <b>{message.from_user.username}</b>! üòä\n\n'
                                f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! üõ†Ô∏è\n\n'
                                f'–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è? ü§î\n\n'
                                f'<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –æ–ø—Ü–∏—é:</b>',
                                parse_mode='HTML', reply_markup=await admin_menu())
        if user_rights == 'user':
            with open('image/KINETIC_WITH_LOVE.jpg', 'rb') as photo:
                await message.reply_photo(photo)
            await message.reply(f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å, <b>{message.from_user.username}</b>! üòä\n\n'
                                f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! üöÄ\n\n'
                                f'–î–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ —É –Ω–∞—Å –∑–¥–µ—Å—å –Ω–æ–≤–µ–Ω—å–∫–æ–≥–æ! üì©\n\n'
                                f'<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –æ–ø—Ü–∏—é:</b>',
                                parse_mode='HTML', reply_markup=await user_menu())
        if user_rights == 'premium':
            with open('image/KINETIC_WITH_LOVE.jpg', 'rb') as photo:
                await message.reply_photo(photo)
            await message.reply(f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å, <b>{message.from_user.username}</b>! üòä\n\n'
                                f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è Premium –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤! üöÄ\n\n'
                                f'–î–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ —É –Ω–∞—Å –∑–¥–µ—Å—å –Ω–æ–≤–µ–Ω—å–∫–æ–≥–æ! üì©\n\n'
                                f'<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –æ–ø—Ü–∏—é:</b>',
                                parse_mode='HTML', reply_markup=await premium_user_menu())
    else:
        cursor_users.execute(
            "INSERT INTO users (user_id, username, rights, label, subscription, notification) VALUES (?, ?, ?, ?, ?, ?)",
            (message.from_user.id, message.from_user.username, 'user', generate_random_string(), 0, '–í–∫–ª—é—á–µ–Ω—ã')
        )
        conn_users.commit()

        cursor_queue.execute(
            "INSERT INTO users_queue (user_id, username, status_queue) VALUES (?, ?, ?)",
            (message.from_user.id, message.from_user.username, 'NOT WAIT')
        )
        conn_queue.commit()

        cursor_balance.execute(
            '''INSERT INTO users_premium_currency (user_id, username, count_curr) VALUES (?, ?, ?)''',
            (message.from_user.id, message.from_user.username, 0))
        conn_balance.commit()
        with open('image/KINETIC_WITH_LOVE.jpg', 'rb') as photo:
            await message.reply_photo(photo)
        await message.reply(f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å, <b>{message.from_user.username}</b>! üòä\n\n'
                            f'–†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –∑–¥–µ—Å—å! üéâ\n\n'
                            f'–Ø - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üì¨\n\n'
                            f'–î–∞–≤–∞–π —è –ø–æ–∫–∞–∂—É, —á—Ç–æ —É–º–µ—é! üí™\n\n'
                            f'<b>–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:</b>',
                            parse_mode='HTML', reply_markup=await user_menu())

    conn_users.close()
    conn_queue.close()
    await message.delete()


@dp.callback_query_handler(lambda query: query.data == 'rules')
async def rules_menu(query: types.CallbackQuery):
    message_text = (
        '<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!</b> üìú\n\n'
        '–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ –ø—Ä–∞–≤–∏–ª–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, —Ç–∞—Ä–∏—Ñ–∞—Ö –∏ –Ω–∞—à–µ–π –ø–æ–ª–∏—Ç–∏–∫–µ '
        '–∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–µ—Ç–∞–ª—è–º–∏:'
    )
    await bot.edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                text=message_text, reply_markup=await rules_menu_key(), parse_mode='HTML')


@dp.callback_query_handler(lambda query: query.data == 'profile')
async def profile_callback(query: types.CallbackQuery):
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    user_id = query.from_user.id
    cursor.execute("SELECT user_id, username, rights, label, subscription, notification FROM users "
                   "WHERE "
                   "user_id=?", (user_id,))

    user_data = cursor.fetchone()

    if user_data:
        user_id, username, rights, label, subscription, notification = user_data
        message_text = (
            f"<b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n"
            f"üë§ <strong>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</strong> {user_id}\n"
            f"üë®‚Äçüíº <strong>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</strong> {username}\n"
            f"üîë <strong>–ü—Ä–∞–≤–∞:</strong> {rights}\n"
            f"üè∑Ô∏è <strong>–ú–µ—Ç–∫–∞:</strong> {label}\n"
            f"üîî <strong>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification}</strong>\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥', —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
        keyboard = types.InlineKeyboardMarkup()
        keyboard.row(types.InlineKeyboardButton('üí∞ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='payment_choose'))
        keyboard.row(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_menu_ru'))

        await bot.edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                    text=message_text, reply_markup=keyboard, parse_mode='HTML')


@dp.callback_query_handler(lambda query: query.data == 'back_to_menu_ru')
async def back_to_ru_menu(query: types.CallbackQuery):
    user_id = query.from_user.id
    user_rights = get_user_rights(user_id)
    keyboard_markup = None

    if user_rights == 'admin':
        keyboard_markup = await admin_menu()
    elif user_rights == 'premium':
        keyboard_markup = await premium_user_menu()
    else:
        keyboard_markup = await user_menu()

    if keyboard_markup:
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        user_id = query.from_user.id
        cursor.execute("SELECT username FROM users "
                       "WHERE "
                       "user_id=?", (user_id,))

        user_data = cursor.fetchone()
        if user_data:
            username = user_data[0]
            message_text = (
                f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å, <b>{username}</b>! üòä\n\n'
                f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! üöÄ\n\n'
                f'–î–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ —É –Ω–∞—Å –∑–¥–µ—Å—å –Ω–æ–≤–µ–Ω—å–∫–æ–≥–æ! üì©\n\n'
                f'<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –æ–ø—Ü–∏—é:</b>'
            )
            await bot.edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                        text=message_text, reply_markup=keyboard_markup, parse_mode='HTML')
        conn.close()
    else:
        pass


@dp.callback_query_handler(lambda c: c.data == 'start_search')
async def start_search(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.answer_callback_query(callback_query.id)
    update_user_status(user_id, 'WAIT')
    await bot.send_message(user_id, "üîç <b>–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...</b> üîç\n\n"
                                    "<i>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è - 10 —Å–µ–∫—É–Ω–¥</i>", parse_mode='HTML')
    await find_partner(user_id)


@dp.message_handler(commands=['stop'])
async def stop_chat(message: types.Message):
    user_id = message.from_user.id
    chat_room = get_chat_room(user_id)

    if chat_room:
        partner_id = chat_room[2] if chat_room[1] == user_id else chat_room[1]
        delete_chat_room(user_id)
        update_user_status(user_id, 'NOT WAIT')
        update_user_status(partner_id, 'NOT WAIT')

        user_rights = get_user_rights(user_id)
        partner_rights = get_user_rights(partner_id)

        user_menu_markup = await get_menu_markup(user_rights)
        partner_menu_markup = await get_menu_markup(partner_rights)

        await bot.send_message(user_id, "‚ú® <b>–û–±—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b> ‚ú®\n\n"
                                        "<i>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–∞—Ç.</i>\n\n"
                                        "<b>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é.</b>\n\n"
                                        "üîç –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "
                                        "'–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫'.", reply_markup=user_menu_markup, parse_mode='HTML')
        await bot.send_message(partner_id, "‚ú® <b>–û–±—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b> ‚ú®\n\n"
                                           "<i>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–∞—Ç.</i>\n\n"
                                           "<b>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é.</b>\n\n"
                                           "üîç –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "
                                           "'–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫'.", reply_markup=partner_menu_markup, parse_mode='HTML')
    else:
        await bot.send_message(user_id, "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞!</b> ‚ö†Ô∏è\n\n"
                                        "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "
                                        "'–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫', —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.", parse_mode='HTML')


@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def handle_messages(message: types.Message):
    user_id = message.from_user.id
    recipient_id = get_recipient_id(message)
    chat_room = get_chat_room(user_id)

    if chat_room:
        partner_id = chat_room[2] if chat_room[1] == user_id else chat_room[1]
        await bot.send_message(partner_id, message.text)
        save_message(user_id, recipient_id, message.text, message.date)

    else:
        await bot.send_message(user_id, "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞!</b> ‚ö†Ô∏è\n\n"
                                        "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "
                                        "'–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫', —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.", parse_mode='HTML')


@dp.callback_query_handler(lambda query: query.data == 'settings')
async def choose_settings(query: types.CallbackQuery):
    user_id = query.from_user.id
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('''SELECT notification FROM users WHERE user_id = ?''', (user_id,))
    notification_status = cursor.fetchone()

    settings_menu_text = (
        "üõ† <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> üõ†\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:\n\n"
        "1Ô∏è‚É£ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n"
        "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n"
        "2Ô∏è‚É£ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
        "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –±–æ—Ç–µ.\n\n"
        "‚ùå –î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'."
    )
    keyboard_settings = types.InlineKeyboardMarkup()

    if notification_status and notification_status[0] == '–í—ã–∫–ª—é—á–µ–Ω—ã':
        keyboard_settings.row(types.InlineKeyboardButton('üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='on_notification'))
    else:
        keyboard_settings.row(types.InlineKeyboardButton('üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='off_notification'))

    keyboard_settings.row(types.InlineKeyboardButton('üî∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='user_info'))
    keyboard_settings.row(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_menu_ru'))

    await bot.edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                text=settings_menu_text, reply_markup=keyboard_settings, parse_mode='HTML')


@dp.callback_query_handler(lambda query: query.data == 'on_notification')
async def on_notification_in_bot(query: types.CallbackQuery):
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    user_id = query.from_user.id
    cursor.execute('''UPDATE users SET notification = '–í–∫–ª—é—á–µ–Ω—ã' WHERE user_id = ?''', (user_id,))
    conn.commit()
    conn.close()
    settings_menu_text = (
        "üõ† <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> üõ†\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:\n\n"
        "1Ô∏è‚É£ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n"
        "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n"
        "2Ô∏è‚É£ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
        "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –±–æ—Ç–µ.\n\n"
        "‚ùå –î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'."
    )
    keyboard_settings = types.InlineKeyboardMarkup()
    keyboard_settings.row(types.InlineKeyboardButton('üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='off_notification'))
    keyboard_settings.row(types.InlineKeyboardButton('üî∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='user_info'))
    keyboard_settings.row(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_menu_ru'))

    await bot.edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                text=settings_menu_text, reply_markup=keyboard_settings, parse_mode='HTML')


@dp.callback_query_handler(lambda query: query.data == 'off_notification')
async def on_notification_in_bot(query: types.CallbackQuery):
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    user_id = query.from_user.id
    cursor.execute('''UPDATE users SET notification = '–í—ã–∫–ª—é—á–µ–Ω—ã' WHERE user_id = ?''', (user_id,))
    conn.commit()
    conn.close()
    settings_menu_text = (
        "üõ† <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> üõ†\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:\n\n"
        "1Ô∏è‚É£ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n"
        "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n"
        "2Ô∏è‚É£ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
        "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –±–æ—Ç–µ.\n\n"
        "‚ùå –î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'."
    )
    keyboard_settings = types.InlineKeyboardMarkup()
    keyboard_settings.row(types.InlineKeyboardButton('üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='on_notification'))
    keyboard_settings.row(types.InlineKeyboardButton('üî∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='user_info'))
    keyboard_settings.row(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_menu_ru'))

    await bot.edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                text=settings_menu_text, reply_markup=keyboard_settings, parse_mode='HTML')


@dp.callback_query_handler(lambda c: c.data == 'all_user')
async def all_users_handler(callback_query: types.CallbackQuery):
    users = get_all_users()
    if users:
        for user in users:
            await bot.send_message(callback_query.from_user.id, str(user))
    else:
        await bot.send_message(callback_query.from_user.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


@dp.callback_query_handler(lambda c: c.data == 'all_message')
async def all_messages_handler(callback_query: types.CallbackQuery):
    messages = get_all_messages()
    if messages:
        for message in messages:
            await bot.send_message(callback_query.from_user.id, str(message))
    else:
        await bot.send_message(callback_query.from_user.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


@dp.callback_query_handler(lambda c: c.data == 'active_table')
async def active_tables_handler(callback_query: types.CallbackQuery):
    tables = get_active_tables()
    if tables:
        for table in tables:
            await bot.send_message(callback_query.from_user.id, str(table))
    else:
        await bot.send_message(callback_query.from_user.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


@dp.callback_query_handler(lambda query: query.data == 'search_user')
async def search_user(query: types.CallbackQuery):
    await bot.send_message(query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ @example:")
    await SomeState.UsernameSearch.set()


@dp.message_handler(state=SomeState.UsernameSearch)
async def process_username(message: types.Message, state: FSMContext):
    username = message.text.strip()
    user_info = find_user_by_username(username)
    if user_info:
        response_text = "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n\n"
        response_text += f"<b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user_info[1]}\n"
        response_text += f"<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user_info[2]}\n"
        if len(user_info) >= 3:
            response_text += f"<b>–ü—Ä–∞–≤–∞:</b> {user_info[3]}\n"
        if len(user_info) >= 4:
            response_text += f"<b>–ú–µ—Ç–∫–∞:</b> {user_info[4]}\n"
        if len(user_info) >= 5:
            response_text += f"<b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {'–ü—Ä–µ–º–∏—É–º' if user_info[5] else '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è'}\n"
        if len(user_info) >= 6:
            response_text += f"<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {user_info[6]}\n"
    else:
        response_text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
    await bot.send_message(message.chat.id, response_text, parse_mode='HTML')
    await state.finish()


@dp.callback_query_handler(lambda query: query.data == 'give_subscription')
async def give_subscription(query: types.CallbackQuery):
    admin_id = 933411060
    await bot.send_message(admin_id, "–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ @example:")
    await SomeState.SubscriptionUsername.set()


@dp.message_handler(state=SomeState.SubscriptionUsername)
async def process_subscription_username(message: types.Message, state: FSMContext):
    username = message.text.strip()
    user_data = find_user_by_username(username)
    if user_data:
        user_id = user_data[1]
        await bot.send_message(user_id, "–í–∞–º –±—ã–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
        update_subscription(user_id, 'premium')
        response_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å username {username} –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞."
        admin_ids = get_all_admin_ids()
        for admin_id in admin_ids:
            await bot.send_message(admin_id, response_text)
    else:
        response_text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
        await bot.send_message(message.chat.id, response_text)

    await state.finish()


@dp.callback_query_handler(lambda query: query.data == 'search_message')
async def search_message(query: types.CallbackQuery):
    await bot.send_message(query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await SomeState.MessageUsername.set()


@dp.message_handler(state=SomeState.MessageUsername)
async def process_message_username(message: types.Message, state: FSMContext):
    username = message.text.strip()
    user_data = find_user_by_username(username)
    if user_data:
        user_id = user_data[1]
        messages = find_messages_by_user_id(user_id)
        if messages:
            response_text = ""
            for msg_data in messages:
                msg, sender_id, recipient_id = msg_data
                sender_data = find_user_by_user_id(sender_id)
                recipient_data = find_user_by_user_id(recipient_id)
                if sender_data and sender_data[2]:
                    sender_name = sender_data[2]
                    if sender_id == user_id:
                        response_text += f"{sender_name}: {msg}\n"
                    else:
                        response_text += f"–ü–æ–ª—É—á–µ–Ω–æ –æ—Ç {sender_name}: {msg}\n"
                if recipient_data and recipient_data[2]:
                    recipient_name = recipient_data[2]
                    if recipient_id == user_id:
                        response_text += f"–ü–æ–ª—É—á–µ–Ω–æ –æ—Ç {recipient_name}: {msg}\n"
            response_text = response_text.strip()
        else:
            response_text = "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
    else:
        response_text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
    await bot.send_message(message.chat.id, response_text)
    await state.finish()


@dp.callback_query_handler(lambda query: query.data == 'spam')
async def message_for_all_users_from_admin(query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(query.from_user.id,
                           "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
                           reply_markup=cancel_markup())
    await SpamState.waiting_for_input.set()


@dp.callback_query_handler(lambda c: c.data == 'cancel_spam', state=SpamState.waiting_for_input)
async def cancel_spam(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.send_message(callback_query.from_user.id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await bot.answer_callback_query(callback_query.id)


@dp.message_handler(content_types=types.ContentTypes.ANY, state=SpamState.waiting_for_input)
async def process_message_or_file_from_admin(message: types.Message, state: FSMContext):
    input_message = message.text or message.caption or message.document or message.audio or message.photo
    users = get_users_with_notification_enabled()
    for user_tuple in users:
        user_id = user_tuple[1]
        if message.text:
            await bot.send_message(user_id, input_message)
        elif message.caption:
            await bot.send_photo(user_id, message.photo[-1].file_id, caption=message.caption)
        elif message.document:
            await bot.send_document(user_id, message.document.file_id, caption=message.caption)
        elif message.audio:
            await bot.send_audio(user_id, message.audio.file_id, caption=message.caption)
        elif message.photo:
            await bot.send_photo(user_id, message.photo[-1].file_id, caption=message.caption)
    await state.finish()
    await bot.send_message(message.from_user.id, "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")


@dp.callback_query_handler(lambda query: query.data == 'search_table')
async def search_table_handler(query: types.CallbackQuery):
    await bot.send_message(query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–æ–ª–∞:")
    await TableState.TableSearchUsername.set()


@dp.message_handler(state=TableState.TableSearchUsername)
async def process_table_search_username(message: types.Message, state: FSMContext):
    username = message.text.strip()
    user_data = find_user_by_username(username)
    if user_data:
        user_id = user_data[1]
        table_info = find_table_info_by_user_id(user_id)
        if table_info:
            response_text = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–ª–µ:\n{table_info}"
        else:
            response_text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    else:
        response_text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."

    await bot.send_message(message.chat.id, response_text)
    await state.finish()


@dp.callback_query_handler(lambda query: query.data == 'premium_play')
async def game_for_premium(query: types.CallbackQuery):
    game_text = (
        "<b>üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–≥—Ä–æ–≤–æ–µ –ú–µ–Ω—é! üéâ</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏—Ö –∏–≥—Ä –∏ –ø–æ–ø—ã—Ç–∞–π—Ç–µ —É–¥–∞—á—É:\n\n"
        "<b>üîì 1. –°—É–Ω–¥—É–∫–∏</b> - –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ —Å—É–Ω–¥—É–∫–∏ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ —Ü–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã, –Ω–æ —É—á—Ç–∏—Ç–µ, –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å—É–Ω–¥—É–∫–∞—Ö "
        "–±–æ–º–±—ã!\n\n"
        "<b>üìà 2. –ë–æ–ª—å—à–µ –∏–ª–∏ –ú–µ–Ω—å—à–µ</b> - –£–≥–∞–¥–∞–π—Ç–µ, –±—É–¥–µ—Ç –ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∏–ª–∏ –º–µ–Ω—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ!\n\n"
        "<b>üé∞ 3. –†—É–ª–µ—Ç–∫–∞</b> - –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞ –ø–æ–ª—É—á–∞–π –¥–æ 100 –±–∞–ª–ª–æ–≤ –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å!"
    )
    await bot.edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                text=game_text, reply_markup=await game_menu(), parse_mode='HTML')


@dp.callback_query_handler(lambda query: query.data == 'count_currency')
async def profile_number_2(query: types.CallbackQuery):
    user_id = query.from_user.id
    count_curr = get_user_currency(user_id)
    menu_curr_text = (
        f"<b>–ú–µ–Ω—é –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ üí≥</b>\n\n"
        f"üëõ –í–∞—à–∏ –±–∞–ª–ª—ã: <code>{count_curr}</code>\n\n"
        f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?\n"
        f"1Ô∏è‚É£ <b>–û–±–º–µ–Ω—è—Ç—å –±–∞–ª–ª—ã –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É</b>\n"
        f"2Ô∏è‚É£ <b>–°—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—ã</b>\n\n"
        f"‚ÑπÔ∏è –≠—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–∞—Ö –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é!"
    )
    await bot.edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                text=menu_curr_text, reply_markup=await back_menu(), parse_mode='HTML')


@dp.callback_query_handler(lambda call: call.data == 'cancel_message', state='*')
async def cancel_message(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await call.answer()
    await state.finish()


@dp.callback_query_handler(lambda query: query.data == 'send_anon_message')
async def give_subscription(query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ example:",
                           reply_markup=get_cancel_button())
    await AnonSMS.wait_username.set()


@dp.message_handler(content_types=types.ContentTypes.ANY, state=AnonSMS.wait_username)
async def process_username(message: types.Message, state: FSMContext):
    username = message.text.strip()
    user_id = find_user_by_username_2(username)
    if user_id is not None:
        await state.update_data(recipient_user_id=user_id)
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.")
        await AnonSMS.next()
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_cancel_button())


@dp.message_handler(content_types=types.ContentTypes.ANY, state=AnonSMS.wait_sms)
async def process_message_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    recipient_user_id = data.get('recipient_user_id')
    if recipient_user_id:
        if message.text:
            message_text = message.text
            await bot.send_message(recipient_user_id, f"–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}")
        elif message.photo:
            await message.photo[-1].download('photo.jpg')
            with open('photo.jpg', 'rb') as photo:
                await bot.send_photo(recipient_user_id, photo)
        elif message.sticker:
            await bot.send_sticker(recipient_user_id, message.sticker.file_id)
        elif message.document:
            await bot.send_document(recipient_user_id, message.document.file_id)
        else:
            await message.answer("–°–æ–∂–∞–ª–µ–µ–º, –Ω–æ –º—ã –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.")

        await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ.")
        await state.finish()
    else:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@dp.callback_query_handler(lambda query: query.data == 'shop_currency')
async def shop_in_bot(query: types.CallbackQuery):
    shop_menu_text = (
        "<b>üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–∞–≥–∞–∑–∏–Ω –ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–æ–∫! üåü</b>\n"
        "<i>–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω—è—Ç—å –≤–∞—à–∏ –±–∞–ª–ª—ã –Ω–∞ —Ü–µ–Ω–Ω—ã–µ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏.</i>\n\n"
        "üíé <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏:</b>\n"
        "1Ô∏è‚É£ <b>–¢—Ä–µ—Ö–¥–Ω–µ–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b> - 200 –±–∞–ª–ª–æ–≤\n"
        "2Ô∏è‚É£ <b>–û–¥–Ω–æ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b> - 300 –±–∞–ª–ª–æ–≤\n"
        "3Ô∏è‚É£ <b>–¢—Ä–µ—Ö–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b> - 540 –±–∞–ª–ª–æ–≤ (10% —Å–∫–∏–¥–∫–∞!)\n"
        "4Ô∏è‚É£ <b>–ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b> - 1820 –±–∞–ª–ª–æ–≤ (20% —Å–∫–∏–¥–∫–∞!)\n\n"
        "<u>–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –ø–æ–ª—É—á–∞—Ç—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</u>\n"
        "üîπ Premium –ø–æ–∏—Å–∫\n"
        "üîπ –î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É\n"
        "üîπ –ò–≥—Ä—ã\n"
        "üîπ –ê–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "üîπ –ë—ã—Å—Ç—Ä–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        "–î–ª—è –æ–±–º–µ–Ω–∞ –±–∞–ª–ª–æ–≤ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞–ø–∏—à–∏—Ç–µ <b>–ù–æ–º–µ—Ä –æ–ø—Ü–∏–∏</b>.\n"
        "<i>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏!</i>"
    )
    await bot.edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                text=shop_menu_text, reply_markup=await subs_buy(), parse_mode='HTML')


SUBSCRIPTION_COSTS = {
    'three_days': 200,
    'subs_month': 300,
    'subs_3_month': 540,
    'subs_year': 1820
}


@dp.callback_query_handler(lambda c: c.data in SUBSCRIPTION_COSTS.keys())
async def handle_subscription_purchase(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    subscription_type = callback_query.data
    cost = SUBSCRIPTION_COSTS[subscription_type]

    if update_currency(user_id, cost, subscription_type):
        await callback_query.message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∞!")
    else:
        await callback_query.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")

    await callback_query.answer()


last_roulette_usage = {}


@dp.callback_query_handler(lambda query: query.data == 'roulette')
async def every_24_hours_roulette(query: types.CallbackQuery):
    user_id = query.from_user.id
    current_time = time.time()

    if user_id in last_roulette_usage:
        last_usage_time = last_roulette_usage[user_id]
        time_elapsed = current_time - last_usage_time

        if time_elapsed < 24 * 60 * 60:
            await bot.answer_callback_query(query.id,
                                            text="–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 24 —á–∞—Å–æ–≤.")
            return

    last_roulette_usage[user_id] = current_time

    count = random.randrange(0, 50)
    conn = sqlite3.connect(CURRENCY_DATABASE)
    cursor = conn.cursor()
    cursor.execute('''UPDATE users_premium_currency SET count_curr = count_curr + ? WHERE user_id = ?''',
                   (count, user_id))
    conn.commit()
    conn.close()
    curr_text = (
        f'–í–∞—à –±–∞–ª–∞–Ω—Å –±–∞–ª–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {count}!\n\n'
        f'–°–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –í—ã —Å–º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.'
    )
    await bot.edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                text=curr_text, reply_markup=await back_menu(), parse_mode='HTML')


last_button_press = {}


@dp.callback_query_handler(lambda query: query.data == 'chest')
async def start_chest_game(query: types.CallbackQuery):
    user_id = query.from_user.id

    current_time = time.time()
    if user_id in last_button_press and current_time - last_button_press[user_id] < 24 * 3600:
        await bot.answer_callback_query(query.id,
                                        text="–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 24 —á–∞—Å–æ–≤.")
    else:
        chest_text = (
            '''
            –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–Ω–¥—É–∫:
            '''
        )
        await bot.edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                    text=chest_text, reply_markup=await chest_menu(), parse_mode='HTML')


@dp.callback_query_handler(lambda query: query.data.startswith('chest_'))
async def handle_chest_choice(query: types.CallbackQuery):
    user_id = query.from_user.id
    chosen_chest = int(query.data.split('_')[1])

    points, correct_chest = await chest_game(user_id, chosen_chest)

    if points > 0:
        win_chest_text = f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—É–Ω–¥—É–∫ (–Ω–æ–º–µ—Ä {correct_chest}). –í –Ω–µ–º {points} –±–∞–ª–ª–æ–≤!"
        await bot.edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                    text=win_chest_text, reply_markup=await back_menu(), parse_mode='HTML')
    else:
        lose_chest_text = (f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—É–Ω–¥—É–∫. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—É–Ω–¥—É–∫ –±—ã–ª –Ω–æ–º–µ—Ä {correct_chest}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ "
                           f"–µ—â–µ —Ä–∞–∑!")
        await bot.edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                    text=lose_chest_text, reply_markup=await back_menu(), parse_mode='HTML')

    last_button_press[user_id] = time.time()


@dp.callback_query_handler(lambda c: c.data == 'prem_ser')
async def choose_search_premium(query: types.CallbackQuery):
    text_choose = (
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:'
    )
    await bot.edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                text=text_choose, reply_markup=await start_prem_search(), parse_mode='HTML'
                                )


@dp.callback_query_handler(lambda c: c.data == 'premium_search')
async def start_search(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.answer_callback_query(callback_query.id)
    update_user_status(user_id, 'PREMIUM_WAIT')
    await bot.send_message(user_id, "üîç <b>–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...</b> üîç\n\n"
                                    "<i>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è - 10 —Å–µ–∫—É–Ω–¥</i>", parse_mode='HTML')
    await find_premium_partner(user_id)


@dp.message_handler(commands=['stop_premium'])
async def stop_chat(message: types.Message):
    user_id = message.from_user.id
    chat_room = get_chat_room(user_id)

    if chat_room:
        partner_id = chat_room[2] if chat_room[1] == user_id else chat_room[1]
        delete_chat_room(user_id)
        update_user_status(user_id, 'NOT WAIT')
        update_user_status(partner_id, 'NOT WAIT')

        user_rights = get_user_rights(user_id)
        partner_rights = get_user_rights(partner_id)

        user_menu_markup = await get_menu_markup(user_rights)
        partner_menu_markup = await get_menu_markup(partner_rights)

        await bot.send_message(user_id, "‚ú® <b>–û–±—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b> ‚ú®\n\n"
                                        "<i>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–∞—Ç.</i>\n\n"
                                        "<b>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é.</b>\n\n"
                                        "üîç –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "
                                        "'–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫'.", reply_markup=user_menu_markup, parse_mode='HTML')
        await bot.send_message(partner_id, "‚ú® <b>–û–±—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b> ‚ú®\n\n"
                                           "<i>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–∞—Ç.</i>\n\n"
                                           "<b>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é.</b>\n\n"
                                           "üîç –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "
                                           "'–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫'.", reply_markup=partner_menu_markup, parse_mode='HTML')
    else:
        await bot.send_message(user_id, "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞!</b> ‚ö†Ô∏è\n\n"
                                        "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "
                                        "'–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫', —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.", parse_mode='HTML')


last_button_press_big_small = {}


@dp.callback_query_handler(lambda query: query.data == 'random_game')
async def start_random_game(query: types.CallbackQuery):
    user_id = query.from_user.id

    current_time = time.time()
    if user_id in last_button_press_big_small and current_time - last_button_press_big_small[user_id][
        "time"] < 24 * 3600:
        await bot.answer_callback_query(query.id, text="–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 24 —á–∞—Å–æ–≤.")
    else:
        secret_number = random.randint(1, 100)
        shown_number = random.randint(1, 100)

        game_text = f"–í—ã–±—Ä–∞–Ω–æ —á–∏—Å–ª–æ: {shown_number}. –£–≥–∞–¥–∞–π—Ç–µ, –±—É–¥–µ—Ç –ª–∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∏–ª–∏ –º–µ–Ω—å—à–µ?"
        await bot.edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                    text=game_text, reply_markup=await greater_or_lower_menu(), parse_mode='HTML')

        last_button_press_big_small[user_id] = {"time": current_time, "secret_number": secret_number,
                                                "shown_number": shown_number}


@dp.callback_query_handler(lambda query: query.data.startswith('guess_'))
async def handle_guess(query: types.CallbackQuery):
    user_id = query.from_user.id
    guess = query.data.split('_')[1]

    game_info = last_button_press_big_small.get(user_id)

    if not game_info:
        await bot.answer_callback_query(query.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å–Ω–æ–≤–∞.")
        return

    secret_number = game_info["secret_number"]
    shown_number = game_info["shown_number"]
    current_time = time.time()

    if current_time - game_info["time"] < 24 * 3600:
        if (guess == "greater" and secret_number > shown_number) or (guess == "lower" and secret_number < shown_number):
            await bot.answer_callback_query(query.id, text="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏!")
            await add_points(user_id, 100)
        else:
            await bot.answer_callback_query(query.id, text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    else:
        await bot.answer_callback_query(query.id,
                                        text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 24 —á–∞—Å–∞.")


@dp.callback_query_handler(lambda query: query.data == 'registration')
async def start_registration(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–ö–∞–∫–æ–π —É –≤–∞—Å –ø–æ–ª?", reply_markup=gender_keyboard())
    await Registration.gender.set()


@dp.callback_query_handler(state=Registration.gender)
async def set_gender(callback_query: types.CallbackQuery, state: FSMContext):
    gender = callback_query.data
    await state.update_data(gender=gender)
    await callback_query.message.answer("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç? (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 16 –¥–æ 90)")
    await Registration.next()


@dp.message_handler(lambda message: not message.text.isdigit() or not 16 <= int(message.text) <= 90,
                    state=Registration.age)
async def invalid_age(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 16 –¥–æ 90).")


@dp.message_handler(state=Registration.age)
async def set_age(message: types.Message, state: FSMContext):
    age = int(message.text)
    await state.update_data(age=age)
    await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ?")
    await Registration.next()


@dp.message_handler(state=Registration.city)
async def set_city(message: types.Message, state: FSMContext):
    city = message.text
    await state.update_data(city=city)

    user_data = await state.get_data()
    gender = user_data['gender']
    age = user_data['age']
    city = user_data['city']
    conn = sqlite3.connect(REGISTER_DB)
    cursor = conn.cursor()
    cursor.execute("INSERT INTO database_premium (username, gender, age, town) VALUES (?, ?, ?, ?)",
                   (message.from_user.username, gender, age, city))
    conn.commit()
    conn.close()

    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ!")
    await state.finish()


@dp.callback_query_handler(lambda c: c.data == 'userinfo')
async def process_callback_userinfo(callback_query: types.CallbackQuery):
    await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                message_id=callback_query.message.message_id,
                                text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã",
                                reply_markup=get_interests_keyboard())


@dp.callback_query_handler(lambda c: c.data.startswith('gender_'))
async def process_callback_gender(callback_query: types.CallbackQuery):
    gender = callback_query.data.split('_')[1]
    update_interest(callback_query.from_user.id, 'interest_gender', gender)
    await bot.answer_callback_query(callback_query.id, text="–ü–æ–ª –≤—ã–±—Ä–∞–Ω –∏ –∑–∞–ø–∏—Å–∞–Ω")
    try:
        await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, reply_markup=get_interests_keyboard())
    except MessageNotModified:
        pass

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
@dp.callback_query_handler(lambda c: c.data.startswith('age_'))
async def process_callback_age(callback_query: types.CallbackQuery):
    age = callback_query.data.split('_')[1]
    update_interest(callback_query.from_user.id, 'interest_age', age)
    await bot.answer_callback_query(callback_query.id, text="–í–æ–∑—Ä–∞—Å—Ç –≤—ã–±—Ä–∞–Ω –∏ –∑–∞–ø–∏—Å–∞–Ω")
    try:
        await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, reply_markup=get_interests_keyboard())
    except MessageNotModified:
        pass

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —á–∞—Ç–∞
@dp.callback_query_handler(lambda c: c.data.startswith('chat_'))
async def process_callback_chat(callback_query: types.CallbackQuery):
    chat_type = callback_query.data.split('_')[1]
    update_interest(callback_query.from_user.id, 'interest_chat', chat_type)
    await bot.answer_callback_query(callback_query.id, text="–¢–∏–ø —á–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω –∏ –∑–∞–ø–∏—Å–∞–Ω")
    try:
        await bot.edit_message_reply_markup(callback_query.from_user.id, callback_query.message.message_id, reply_markup=get_interests_keyboard())
    except MessageNotModified:
        pass

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
@dp.callback_query_handler(lambda c: c.data == 'town')
async def process_callback_town(callback_query: types.CallbackQuery):
    await Form.waiting_for_town.set()
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≥–æ—Ä–æ–¥")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
@dp.message_handler(state=Form.waiting_for_town)
async def process_town(message: types.Message, state: FSMContext):
    update_interest(message.from_user.id, 'interest_town', message.text)
    await message.reply("–ì–æ—Ä–æ–¥ –≤—ã–±—Ä–∞–Ω –∏ –∑–∞–ø–∏—Å–∞–Ω")
    await state.finish()
    try:
        await bot.edit_message_reply_markup(message.from_user.id, message.message_id - 1, reply_markup=get_interests_keyboard())
    except MessageNotModified:
        pass
